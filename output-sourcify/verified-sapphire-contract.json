{
  "matchId": "2972",
  "creationMatch": null,
  "runtimeMatch": "exact_match",
  "verifiedAt": "2024-08-08T10:06:03Z",
  "creationBytecode": {
    "onchainBytecode": null,
    "recompiledBytecode": "",
    "sourceMap": "220:3525:4:-:0;;;526:163;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;635:5;642:7;2044:5:0;:13;635:5:4;2044::0;:13;:::i;:::-;-1:-1:-1;2067:7:0;:17;2077:7;2067;:17;:::i;:::-;;1978:113;;992:21:5;1002:10;992:9;;;:21;;:::i;:::-;661::4::1;;;::::0;-1:-1:-1;220:3525:4;;-1:-1:-1;220:3525:4;2111:169:5;2185:6;;;-1:-1:-1;;;;;2201:17:5;;;-1:-1:-1;;;;;;2201:17:5;;;;;;;2233:40;;2185:6;;;2201:17;2185:6;;2233:40;;2166:16;;2233:40;2156:124;2111:169;:::o;14:127:6:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:6;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:6;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:6:o;991:712::-;1097:6;1105;1113;1166:2;1154:9;1145:7;1141:23;1137:32;1134:52;;;1182:1;1179;1172:12;1134:52;1209:16;;-1:-1:-1;;;;;1274:14:6;;;1271:34;;;1301:1;1298;1291:12;1271:34;1324:61;1377:7;1368:6;1357:9;1353:22;1324:61;:::i;:::-;1314:71;;1431:2;1420:9;1416:18;1410:25;1394:41;;1460:2;1450:8;1447:16;1444:36;;;1476:1;1473;1466:12;1444:36;;1499:63;1554:7;1543:8;1532:9;1528:24;1499:63;:::i;:::-;1489:73;;;1605:2;1594:9;1590:18;1584:25;1649:4;1642:5;1638:16;1631:5;1628:27;1618:55;;1669:1;1666;1659:12;1618:55;1692:5;1682:15;;;991:712;;;;;:::o;1708:380::-;1787:1;1783:12;;;;1830;;;1851:61;;1905:4;1897:6;1893:17;1883:27;;1851:61;1958:2;1950:6;1947:14;1927:18;1924:38;1921:161;;2004:10;1999:3;1995:20;1992:1;1985:31;2039:4;2036:1;2029:15;2067:4;2064:1;2057:15;1921:161;;1708:380;;;:::o;2219:545::-;2321:2;2316:3;2313:11;2310:448;;;2357:1;2382:5;2378:2;2371:17;2427:4;2423:2;2413:19;2497:2;2485:10;2481:19;2478:1;2474:27;2468:4;2464:38;2533:4;2521:10;2518:20;2515:47;;;-1:-1:-1;2556:4:6;2515:47;2611:2;2606:3;2602:12;2599:1;2595:20;2589:4;2585:31;2575:41;;2666:82;2684:2;2677:5;2674:13;2666:82;;;2729:17;;;2710:1;2699:13;2666:82;;;2670:3;;;2310:448;2219:545;;;:::o;2940:1352::-;3060:10;;-1:-1:-1;;;;;3082:30:6;;3079:56;;;3115:18;;:::i;:::-;3144:97;3234:6;3194:38;3226:4;3220:11;3194:38;:::i;:::-;3188:4;3144:97;:::i;:::-;3296:4;;3360:2;3349:14;;3377:1;3372:663;;;;4079:1;4096:6;4093:89;;;-1:-1:-1;4148:19:6;;;4142:26;4093:89;-1:-1:-1;;2897:1:6;2893:11;;;2889:24;2885:29;2875:40;2921:1;2917:11;;;2872:57;4195:81;;3342:944;;3372:663;2166:1;2159:14;;;2203:4;2190:18;;-1:-1:-1;;3408:20:6;;;3526:236;3540:7;3537:1;3534:14;3526:236;;;3629:19;;;3623:26;3608:42;;3721:27;;;;3689:1;3677:14;;;;3556:19;;3526:236;;;3530:3;3790:6;3781:7;3778:19;3775:201;;;3851:19;;;3845:26;-1:-1:-1;;3934:1:6;3930:14;;;3946:3;3926:24;3922:37;3918:42;3903:58;3888:74;;3775:201;-1:-1:-1;;;;;4022:1:6;4006:14;;;4002:22;3989:36;;-1:-1:-1;2940:1352:6:o;:::-;220:3525:4;;;;;;;;;;;;",
    "linkReferences": {},
    "cborAuxdata": {
      "1": {
        "value": "0xa2646970667358221220f0061d6652c3cdec3d7ea07b04ec46693ddd7cf01d385cc2b9bcb27f6f7c5f5164736f6c63430008110033",
        "offset": 5169
      }
    },
    "transformations": null,
    "transformationValues": null
  },
  "runtimeBytecode": {
    "onchainBytecode": "",
    "recompiledBytecode": "",
    "sourceMap": "220:3525:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:6;;1185:22;1167:41;;1155:2;1140:18;4433:197:0;1027:187:6;3244:106:0;3331:12;;3244:106;;;1365:25:6;;;1353:2;1338:18;3244:106:0;1219:177:6;5192:286:0;;;;;;:::i;:::-;;:::i;3100:98:4:-;;;1906:4:6;3182:9:4;1894:17:6;1876:36;;1864:2;1849:18;3100:98:4;1734:184:6;5873:236:0;;;;;;:::i;:::-;;:::i;898:311:4:-;;;;;;:::i;:::-;;:::i;1317:119::-;;;;;;:::i;:::-;;:::i;3353:224::-;;;;;;:::i;:::-;;:::i;:::-;;3408:125:0;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:0;3482:7;3508:18;;;;;;;;;;;;3408:125;2118:123:4;;;;;;:::i;:::-;;:::i;3660:83::-;;;:::i;:::-;;;-1:-1:-1;;;;;2463:55:6;;;2445:74;;2433:2;2418:18;3660:83:4;2299:226:6;1479:85:5;1551:6;;-1:-1:-1;;;;;1551:6:5;1479:85;;2367:102:0;;;:::i;6596:429::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;340:41:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;2704:25:6;;;2760:2;2745:18;;2738:34;;;;2677:18;340:41:4;2530:248:6;3976:149:0;;;;;;:::i;:::-;-1:-1:-1;;;;;4091:18:0;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149;1916:189:5;;;;;;:::i;:::-;;:::i;2156:98:0:-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:3;4570:32:0;719:10:3;4586:7:0;4595:6;4570:8;:32::i;:::-;4619:4;4612:11;;;4433:197;;;;;:::o;5192:286::-;5319:4;719:10:3;5375:38:0;5391:4;719:10:3;5406:6:0;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:0;;5192:286;-1:-1:-1;;;;5192:286:0:o;5873:236::-;719:10:3;5961:4:0;6040:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6040:27:0;;;;;;;;;;5961:4;;719:10:3;6015:66:0;;719:10:3;;6040:27:0;;:40;;6070:10;;6040:40;:::i;:::-;6015:8;:66::i;898:311:4:-;1003:10;960:4;995:19;;;:7;:19;;;;;1032:5;;1024:36;;;;-1:-1:-1;;;1024:36:4;;3897:2:6;1024:36:4;;;3879:21:6;3936:2;3916:18;;;3909:30;3975:16;3955:18;;;3948:44;4009:18;;1024:36:4;;;;;;;;;1081:7;1070:1;:7;;;:18;;;;;;;:::i;:::-;;;;-1:-1:-1;;1117:5:4;;1106:7;;;;:16;;1098:54;;;;-1:-1:-1;;;1098:54:4;;4240:2:6;1098:54:4;;;4222:21:6;4279:2;4259:18;;;4252:30;4318:27;4298:18;;;4291:55;4363:18;;1098:54:4;4038:349:6;1098:54:4;1162:19;1168:3;1173:7;1162:5;:19::i;1317:119::-;1366:4;1382:26;1388:10;1400:7;1382:5;:26::i;:::-;-1:-1:-1;1425:4:4;;1317:119;-1:-1:-1;1317:119:4:o;3353:224::-;1702:10:5;1691:7;1551:6;;-1:-1:-1;;;;;1551:6:5;;1479:85;1691:7;-1:-1:-1;;;;;1691:21:5;;1683:66;;;;-1:-1:-1;;;1683:66:5;;4594:2:6;1683:66:5;;;4576:21:6;;;4613:18;;;4606:30;4672:34;4652:18;;;4645:62;4724:18;;1683:66:5;4392:356:6;1683:66:5;-1:-1:-1;;;;;3491:16:4;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;;:27;;;3533:37;;4927:74:6;;;5017:18;;5010:34;;;3533:37:4::1;::::0;4900:18:6;3533:37:4::1;;;;;;;3353:224:::0;;:::o;2118:123::-;2186:4;2209:25;2219:5;2226:7;2209:9;:25::i;:::-;2202:32;2118:123;-1:-1:-1;;;2118:123:4:o;3660:83::-;3703:7;3729;1551:6:5;;-1:-1:-1;;;;;1551:6:5;;1479:85;3729:7:4;3722:14;;3660:83;:::o;2367:102:0:-;2423:13;2455:7;2448:14;;;;;:::i;6596:429::-;719:10:3;6689:4:0;6770:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6770:27:0;;;;;;;;;;6689:4;;719:10:3;6815:35:0;;;;6807:85;;;;-1:-1:-1;;;6807:85:0;;5257:2:6;6807:85:0;;;5239:21:6;5296:2;5276:18;;;5269:30;5335:34;5315:18;;;5308:62;5406:7;5386:18;;;5379:35;5431:19;;6807:85:0;5055:401:6;6807:85:0;6926:60;6935:5;6942:7;6970:15;6951:16;:34;6926:8;:60::i;3729:189::-;3808:4;719:10:3;3862:28:0;719:10:3;3879:2:0;3883:6;3862:9;:28::i;1916:189:5:-;1702:10;1691:7;1551:6;;-1:-1:-1;;;;;1551:6:5;;1479:85;1691:7;-1:-1:-1;;;;;1691:21:5;;1683:66;;;;-1:-1:-1;;;1683:66:5;;4594:2:6;1683:66:5;;;4576:21:6;;;4613:18;;;4606:30;4672:34;4652:18;;;4645:62;4724:18;;1683:66:5;4392:356:6;1683:66:5;-1:-1:-1;;;;;2004:22:5;::::1;1996:73;;;::::0;-1:-1:-1;;;1996:73:5;;5663:2:6;1996:73:5::1;::::0;::::1;5645:21:6::0;5702:2;5682:18;;;5675:30;5741:34;5721:18;;;5714:62;5812:8;5792:18;;;5785:36;5838:19;;1996:73:5::1;5461:402:6::0;1996:73:5::1;2079:19;2089:8;2079:9;:19::i;:::-;1916:189:::0;:::o;10123:370:0:-;-1:-1:-1;;;;;10254:19:0;;10246:68;;;;-1:-1:-1;;;10246:68:0;;6070:2:6;10246:68:0;;;6052:21:6;6109:2;6089:18;;;6082:30;6148:34;6128:18;;;6121:62;-1:-1:-1;;;6199:18:6;;;6192:34;6243:19;;10246:68:0;5868:400:6;10246:68:0;-1:-1:-1;;;;;10332:21:0;;10324:68;;;;-1:-1:-1;;;10324:68:0;;6475:2:6;10324:68:0;;;6457:21:6;6514:2;6494:18;;;6487:30;6553:34;6533:18;;;6526:62;-1:-1:-1;;;6604:18:6;;;6597:32;6646:19;;10324:68:0;6273:398:6;10324:68:0;-1:-1:-1;;;;;10403:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10454:32;;1365:25:6;;;10454:32:0;;1338:18:6;10454:32:0;;;;;;;;10123:370;;;:::o;10770:441::-;-1:-1:-1;;;;;4091:18:0;;;10900:24;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10966:37:0;;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:0;;6878:2:6;11019:68:0;;;6860:21:6;6917:2;6897:18;;;6890:30;6956:31;6936:18;;;6929:59;7005:18;;11019:68:0;6676:353:6;11019:68:0;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;:::-;10890:321;10770:441;;;:::o;7488:651::-;-1:-1:-1;;;;;7614:18:0;;7606:68;;;;-1:-1:-1;;;7606:68:0;;7236:2:6;7606:68:0;;;7218:21:6;7275:2;7255:18;;;7248:30;7314:34;7294:18;;;7287:62;7385:7;7365:18;;;7358:35;7410:19;;7606:68:0;7034:401:6;7606:68:0;-1:-1:-1;;;;;7692:16:0;;7684:64;;;;-1:-1:-1;;;7684:64:0;;7642:2:6;7684:64:0;;;7624:21:6;7681:2;7661:18;;;7654:30;7720:34;7700:18;;;7693:62;-1:-1:-1;;;7771:18:6;;;7764:33;7814:19;;7684:64:0;7440:399:6;7684:64:0;-1:-1:-1;;;;;7830:15:0;;7808:19;7830:15;;;;;;;;;;;7863:21;;;;7855:72;;;;-1:-1:-1;;;7855:72:0;;8046:2:6;7855:72:0;;;8028:21:6;8085:2;8065:18;;;8058:30;8124:34;8104:18;;;8097:62;8195:8;8175:18;;;8168:36;8221:19;;7855:72:0;7844:402:6;7855:72:0;-1:-1:-1;;;;;7961:15:0;;;:9;:15;;;;;;;;;;;7979:20;;;7961:38;;8019:13;;;;;;;;:23;;7993:6;;7961:9;8019:23;;7993:6;;8019:23;:::i;:::-;;;;;;;;8073:2;-1:-1:-1;;;;;8058:26:0;8067:4;-1:-1:-1;;;;;8058:26:0;;8077:6;8058:26;;;;1365:25:6;;1353:2;1338:18;;1219:177;8058:26:0;;;;;;;;8095:37;9124:576;8415:389;-1:-1:-1;;;;;8498:21:0;;8490:65;;;;-1:-1:-1;;;8490:65:0;;8453:2:6;8490:65:0;;;8435:21:6;8492:2;8472:18;;;8465:30;8531:33;8511:18;;;8504:61;8582:18;;8490:65:0;8251:355:6;8490:65:0;8642:6;8626:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8658:18:0;;:9;:18;;;;;;;;;;:28;;8680:6;;8658:9;:28;;8680:6;;8658:28;:::i;:::-;;;;-1:-1:-1;;8701:37:0;;1365:25:6;;;-1:-1:-1;;;;;8701:37:0;;;8718:1;;8701:37;;1353:2:6;1338:18;8701:37:0;;;;;;;8415:389;;:::o;9124:576::-;-1:-1:-1;;;;;9207:21:0;;9199:67;;;;-1:-1:-1;;;9199:67:0;;8813:2:6;9199:67:0;;;8795:21:6;8852:2;8832:18;;;8825:30;8891:34;8871:18;;;8864:62;-1:-1:-1;;;8942:18:6;;;8935:31;8983:19;;9199:67:0;8611:397:6;9199:67:0;-1:-1:-1;;;;;9362:18:0;;9337:22;9362:18;;;;;;;;;;;9398:24;;;;9390:71;;;;-1:-1:-1;;;9390:71:0;;9215:2:6;9390:71:0;;;9197:21:6;9254:2;9234:18;;;9227:30;9293:34;9273:18;;;9266:62;-1:-1:-1;;;9344:18:6;;;9337:32;9386:19;;9390:71:0;9013:398:6;9390:71:0;-1:-1:-1;;;;;9495:18:0;;:9;:18;;;;;;;;;;9516:23;;;9495:44;;9559:12;:22;;9533:6;;9495:9;9559:22;;9533:6;;9559:22;:::i;:::-;;;;-1:-1:-1;;9597:37:0;;1365:25:6;;;9623:1:0;;-1:-1:-1;;;;;9597:37:0;;;;;1353:2:6;1338:18;9597:37:0;1219:177:6;2504:524:4;2616:10;2573:4;2608:19;;;:7;:19;;;;;2641:5;;:9;;;:24;;;2664:1;2654;:7;;;:11;2641:24;2637:280;;;2792:7;2781:1;:7;;;:18;;2773:59;;;;-1:-1:-1;;;2773:59:4;;9751:2:6;2773:59:4;;;9733:21:6;9790:2;9770:18;;;9763:30;9829;9809:18;;;9802:58;9877:18;;2773:59:4;9549:352:6;2773:59:4;2874:7;;;:18;;;;;;;2637:280;2926:43;2942:5;2949:10;2961:7;2926:15;:43::i;:::-;2979:21;2985:5;2992:7;2979:5;:21::i;2111:169:5:-;2185:6;;;-1:-1:-1;;;;;2201:17:5;;;;;;;;;;;2233:40;;2185:6;;;2201:17;2185:6;;2233:40;;2166:16;;2233:40;2156:124;2111:169;:::o;14:548:6:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:6;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:6:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:180::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;-1:-1:-1;2074:23:6;;1923:180;-1:-1:-1;1923:180:6:o;2108:186::-;2167:6;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;2783:260::-;2851:6;2859;2912:2;2900:9;2891:7;2887:23;2883:32;2880:52;;;2928:1;2925;2918:12;2880:52;2951:29;2970:9;2951:29;:::i;:::-;2941:39;;2999:38;3033:2;3022:9;3018:18;2999:38;:::i;:::-;2989:48;;2783:260;;;;;:::o;3048:380::-;3127:1;3123:12;;;;3170;;;3191:61;;3245:4;3237:6;3233:17;3223:27;;3191:61;3298:2;3290:6;3287:14;3267:18;3264:38;3261:161;;3344:10;3339:3;3335:20;3332:1;3325:31;3379:4;3376:1;3369:15;3407:4;3404:1;3397:15;3261:161;;3048:380;;;:::o;3433:127::-;3494:10;3489:3;3485:20;3482:1;3475:31;3525:4;3522:1;3515:15;3549:4;3546:1;3539:15;3565:125;3630:9;;;3651:10;;;3648:36;;;3664:18;;:::i;9416:128::-;9483:9;;;9504:11;;;9501:37;;;9518:18;;:::i",
    "linkReferences": {},
    "cborAuxdata": {
      "1": {
        "value": "0xa2646970667358221220f0061d6652c3cdec3d7ea07b04ec46693ddd7cf01d385cc2b9bcb27f6f7c5f5164736f6c63430008110033",
        "offset": 4264
      }
    },
    "immutableReferences": {
      "733": [
        {
          "start": 478,
          "length": 32
        }
      ]
    },
    "transformations": [
      {
        "id": "733",
        "type": "replace",
        "offset": 478,
        "reason": "immutable"
      }
    ],
    "transformationValues": {
      "immutables": {
        "733": "0x0000000000000000000000000000000000000000000000000000000000000012"
      }
    }
  },
  "deployment": {
    "transactionHash": null,
    "blockNumber": null,
    "transactionIndex": null,
    "deployer": null
  },
  "sources": {
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../safeguard/Ownable.sol\";\n\n/**\n * @title Example Multi-Bridge Pegged ERC20 token\n */\ncontract MultiBridgeToken is ERC20, Ownable {\n    struct Supply {\n        uint256 cap;\n        uint256 total;\n    }\n    mapping(address => Supply) public bridges; // bridge address -> supply\n\n    uint8 private immutable _decimals;\n\n    event BridgeSupplyCapUpdated(address bridge, uint256 supplyCap);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @notice Mints tokens to an address. Increases total amount minted by the calling bridge.\n     * @param _to The address to mint tokens to.\n     * @param _amount The amount to mint.\n     */\n    function mint(address _to, uint256 _amount) external returns (bool) {\n        Supply storage b = bridges[msg.sender];\n        require(b.cap > 0, \"invalid caller\");\n        b.total += _amount;\n        require(b.total <= b.cap, \"exceeds bridge supply cap\");\n        _mint(_to, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Burns tokens for msg.sender.\n     * @param _amount The amount to burn.\n     */\n    function burn(uint256 _amount) external returns (bool) {\n        _burn(msg.sender, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\n     * Alternative to {burnFrom} for compatibility with some bridge implementations.\n     * See {_burnFrom}.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function burn(address _from, uint256 _amount) external returns (bool) {\n        return _burnFrom(_from, _amount);\n    }\n\n    /**\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\n     * See {_burnFrom}.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function burnFrom(address _from, uint256 _amount) external returns (bool) {\n        return _burnFrom(_from, _amount);\n    }\n\n    /**\n     * @dev Burns tokens from an address, deducting from the caller's allowance.\n     *      Decreases total amount minted if called by a bridge.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function _burnFrom(address _from, uint256 _amount) internal returns (bool) {\n        Supply storage b = bridges[msg.sender];\n        if (b.cap > 0 || b.total > 0) {\n            // set cap to 1 would effectively disable a deprecated bridge's ability to burn\n            require(b.total >= _amount, \"exceeds bridge minted amount\");\n            unchecked {\n                b.total -= _amount;\n            }\n        }\n        _spendAllowance(_from, msg.sender, _amount);\n        _burn(_from, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Returns the decimals of the token.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @notice Updates the supply cap for a bridge.\n     * @param _bridge The bridge address.\n     * @param _cap The new supply cap.\n     */\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external onlyOwner {\n        // cap == 0 means revoking bridge role\n        bridges[_bridge].cap = _cap;\n        emit BridgeSupplyCapUpdated(_bridge, _cap);\n    }\n\n    /**\n     * @notice Returns the owner address. Required by BEP20.\n     */\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "compilation": {
    "language": "Solidity",
    "compiler": "solc",
    "compilerVersion": "0.8.17+commit.8df45f5f",
    "compilerSettings": {
      "metadata": {
        "bytecodeHash": "ipfs",
        "useLiteralContent": true
      },
      "libraries": {},
      "optimizer": {
        "runs": 800,
        "enabled": true
      },
      "evmVersion": "london",
      "remappings": []
    },
    "name": "MultiBridgeToken",
    "fullyQualifiedName": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
  },
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "name_",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "symbol_",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "decimals_",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "Approval",
      "type": "event",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "name": "BridgeSupplyCapUpdated",
      "type": "event",
      "inputs": [
        {
          "name": "bridge",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "supplyCap",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "name": "OwnershipTransferred",
      "type": "event",
      "inputs": [
        {
          "name": "previousOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "name": "Transfer",
      "type": "event",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "name": "allowance",
      "type": "function",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "approve",
      "type": "function",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "balanceOf",
      "type": "function",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "bridges",
      "type": "function",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "cap",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "total",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "burn",
      "type": "function",
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "burn",
      "type": "function",
      "inputs": [
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "burnFrom",
      "type": "function",
      "inputs": [
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "decimals",
      "type": "function",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "decreaseAllowance",
      "type": "function",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "getOwner",
      "type": "function",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "increaseAllowance",
      "type": "function",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "mint",
      "type": "function",
      "inputs": [
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "name",
      "type": "function",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "owner",
      "type": "function",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "symbol",
      "type": "function",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "totalSupply",
      "type": "function",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "name": "transfer",
      "type": "function",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "transferFrom",
      "type": "function",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "name": "transferOwnership",
      "type": "function",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "name": "updateBridgeSupplyCap",
      "type": "function",
      "inputs": [
        {
          "name": "_bridge",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_cap",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    }
  ],
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol_",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals_",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "supplyCap",
              "type": "uint256"
            }
          ],
          "name": "BridgeSupplyCapUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "bridges",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "burnFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_cap",
              "type": "uint256"
            }
          ],
          "name": "updateBridgeSupplyCap",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(address,uint256)": {
            "params": {
              "_amount": "The amount to burn.",
              "_from": "The address to burn tokens from."
            }
          },
          "burn(uint256)": {
            "params": {
              "_amount": "The amount to burn."
            }
          },
          "burnFrom(address,uint256)": {
            "params": {
              "_amount": "The amount to burn.",
              "_from": "The address to burn tokens from."
            }
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "mint(address,uint256)": {
            "params": {
              "_amount": "The amount to mint.",
              "_to": "The address to mint tokens to."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "updateBridgeSupplyCap(address,uint256)": {
            "params": {
              "_bridge": "The bridge address.",
              "_cap": "The new supply cap."
            }
          }
        },
        "title": "Example Multi-Bridge Pegged ERC20 token",
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(address,uint256)": {
            "notice": "Burns tokens from an address. Decreases total amount minted if called by a bridge. Alternative to {burnFrom} for compatibility with some bridge implementations. See {_burnFrom}."
          },
          "burn(uint256)": {
            "notice": "Burns tokens for msg.sender."
          },
          "burnFrom(address,uint256)": {
            "notice": "Burns tokens from an address. Decreases total amount minted if called by a bridge. See {_burnFrom}."
          },
          "decimals()": {
            "notice": "Returns the decimals of the token."
          },
          "getOwner()": {
            "notice": "Returns the owner address. Required by BEP20."
          },
          "mint(address,uint256)": {
            "notice": "Mints tokens to an address. Increases total amount minted by the calling bridge."
          },
          "updateBridgeSupplyCap(address,uint256)": {
            "notice": "Updates the supply cap for a bridge."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "compilationTarget": {
        "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": "MultiBridgeToken"
      },
      "evmVersion": "london",
      "libraries": {},
      "metadata": {
        "bytecodeHash": "ipfs",
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 800
      },
      "remappings": []
    },
    "sources": {
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n",
        "keccak256": "0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b",
        "license": "MIT"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
        "keccak256": "0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2",
        "license": "MIT"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n",
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "license": "MIT"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n",
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "license": "MIT"
      },
      "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../safeguard/Ownable.sol\";\n\n/**\n * @title Example Multi-Bridge Pegged ERC20 token\n */\ncontract MultiBridgeToken is ERC20, Ownable {\n    struct Supply {\n        uint256 cap;\n        uint256 total;\n    }\n    mapping(address => Supply) public bridges; // bridge address -> supply\n\n    uint8 private immutable _decimals;\n\n    event BridgeSupplyCapUpdated(address bridge, uint256 supplyCap);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @notice Mints tokens to an address. Increases total amount minted by the calling bridge.\n     * @param _to The address to mint tokens to.\n     * @param _amount The amount to mint.\n     */\n    function mint(address _to, uint256 _amount) external returns (bool) {\n        Supply storage b = bridges[msg.sender];\n        require(b.cap > 0, \"invalid caller\");\n        b.total += _amount;\n        require(b.total <= b.cap, \"exceeds bridge supply cap\");\n        _mint(_to, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Burns tokens for msg.sender.\n     * @param _amount The amount to burn.\n     */\n    function burn(uint256 _amount) external returns (bool) {\n        _burn(msg.sender, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\n     * Alternative to {burnFrom} for compatibility with some bridge implementations.\n     * See {_burnFrom}.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function burn(address _from, uint256 _amount) external returns (bool) {\n        return _burnFrom(_from, _amount);\n    }\n\n    /**\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\n     * See {_burnFrom}.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function burnFrom(address _from, uint256 _amount) external returns (bool) {\n        return _burnFrom(_from, _amount);\n    }\n\n    /**\n     * @dev Burns tokens from an address, deducting from the caller's allowance.\n     *      Decreases total amount minted if called by a bridge.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function _burnFrom(address _from, uint256 _amount) internal returns (bool) {\n        Supply storage b = bridges[msg.sender];\n        if (b.cap > 0 || b.total > 0) {\n            // set cap to 1 would effectively disable a deprecated bridge's ability to burn\n            require(b.total >= _amount, \"exceeds bridge minted amount\");\n            unchecked {\n                b.total -= _amount;\n            }\n        }\n        _spendAllowance(_from, msg.sender, _amount);\n        _burn(_from, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Returns the decimals of the token.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @notice Updates the supply cap for a bridge.\n     * @param _bridge The bridge address.\n     * @param _cap The new supply cap.\n     */\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external onlyOwner {\n        // cap == 0 means revoking bridge role\n        bridges[_bridge].cap = _cap;\n        emit BridgeSupplyCapUpdated(_bridge, _cap);\n    }\n\n    /**\n     * @notice Returns the owner address. Required by BEP20.\n     */\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n}\n",
        "keccak256": "0x01c04425aad1d6ecca616cdbc4b7018e1325438e9a3b5a0b4ab87f5378864f58",
        "license": "GPL-3.0-only"
      },
      "contracts/safeguard/Ownable.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n",
        "keccak256": "0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9",
        "license": "GPL-3.0-only"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "types": {
      "t_address": {
        "label": "address",
        "encoding": "inplace",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "label": "uint256",
        "encoding": "inplace",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "label": "string",
        "encoding": "bytes",
        "numberOfBytes": "32"
      },
      "t_struct(Supply)726_storage": {
        "label": "struct MultiBridgeToken.Supply",
        "members": [
          {
            "slot": "0",
            "type": "t_uint256",
            "astId": 723,
            "label": "cap",
            "offset": 0,
            "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
          },
          {
            "slot": "1",
            "type": "t_uint256",
            "astId": 725,
            "label": "total",
            "offset": 0,
            "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
          }
        ],
        "encoding": "inplace",
        "numberOfBytes": "64"
      },
      "t_mapping(t_address,t_uint256)": {
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "value": "t_uint256",
        "encoding": "mapping",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Supply)726_storage)": {
        "key": "t_address",
        "label": "mapping(address => struct MultiBridgeToken.Supply)",
        "value": "t_struct(Supply)726_storage",
        "encoding": "mapping",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "value": "t_mapping(t_address,t_uint256)",
        "encoding": "mapping",
        "numberOfBytes": "32"
      }
    },
    "storage": [
      {
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)",
        "astId": 15,
        "label": "_balances",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      },
      {
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
        "astId": 21,
        "label": "_allowances",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      },
      {
        "slot": "2",
        "type": "t_uint256",
        "astId": 23,
        "label": "_totalSupply",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      },
      {
        "slot": "3",
        "type": "t_string_storage",
        "astId": 25,
        "label": "_name",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      },
      {
        "slot": "4",
        "type": "t_string_storage",
        "astId": 27,
        "label": "_symbol",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      },
      {
        "slot": "5",
        "type": "t_address",
        "astId": 963,
        "label": "_owner",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      },
      {
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Supply)726_storage)",
        "astId": 731,
        "label": "bridges",
        "offset": 0,
        "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
      }
    ]
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Returns the decimals of the token."
      },
      "getOwner()": {
        "notice": "Returns the owner address. Required by BEP20."
      },
      "burn(uint256)": {
        "notice": "Burns tokens for msg.sender."
      },
      "burn(address,uint256)": {
        "notice": "Burns tokens from an address. Decreases total amount minted if called by a bridge. Alternative to {burnFrom} for compatibility with some bridge implementations. See {_burnFrom}."
      },
      "mint(address,uint256)": {
        "notice": "Mints tokens to an address. Increases total amount minted by the calling bridge."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burns tokens from an address. Decreases total amount minted if called by a bridge. See {_burnFrom}."
      },
      "updateBridgeSupplyCap(address,uint256)": {
        "notice": "Updates the supply cap for a bridge."
      }
    },
    "version": 1
  },
  "devdoc": {
    "kind": "dev",
    "title": "Example Multi-Bridge Pegged ERC20 token",
    "methods": {
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "burn(uint256)": {
        "params": {
          "_amount": "The amount to burn."
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "params": {
          "_from": "The address to burn tokens from.",
          "_amount": "The amount to burn."
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_to": "The address to mint tokens to.",
          "_amount": "The amount to mint."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "burnFrom(address,uint256)": {
        "params": {
          "_from": "The address to burn tokens from.",
          "_amount": "The amount to burn."
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "updateBridgeSupplyCap(address,uint256)": {
        "params": {
          "_cap": "The new supply cap.",
          "_bridge": "The bridge address."
        }
      }
    },
    "version": 1
  },
  "sourceIds": {
    "contracts/safeguard/Ownable.sol": {
      "id": 5
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "id": 3
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "id": 0
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "id": 1
    },
    "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": {
      "id": 4
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "id": 2
    }
  },
  "stdJsonInput": {
    "language": "Solidity",
    "sources": {
      "contracts/safeguard/Ownable.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
      },
      "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../safeguard/Ownable.sol\";\n\n/**\n * @title Example Multi-Bridge Pegged ERC20 token\n */\ncontract MultiBridgeToken is ERC20, Ownable {\n    struct Supply {\n        uint256 cap;\n        uint256 total;\n    }\n    mapping(address => Supply) public bridges; // bridge address -> supply\n\n    uint8 private immutable _decimals;\n\n    event BridgeSupplyCapUpdated(address bridge, uint256 supplyCap);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @notice Mints tokens to an address. Increases total amount minted by the calling bridge.\n     * @param _to The address to mint tokens to.\n     * @param _amount The amount to mint.\n     */\n    function mint(address _to, uint256 _amount) external returns (bool) {\n        Supply storage b = bridges[msg.sender];\n        require(b.cap > 0, \"invalid caller\");\n        b.total += _amount;\n        require(b.total <= b.cap, \"exceeds bridge supply cap\");\n        _mint(_to, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Burns tokens for msg.sender.\n     * @param _amount The amount to burn.\n     */\n    function burn(uint256 _amount) external returns (bool) {\n        _burn(msg.sender, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\n     * Alternative to {burnFrom} for compatibility with some bridge implementations.\n     * See {_burnFrom}.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function burn(address _from, uint256 _amount) external returns (bool) {\n        return _burnFrom(_from, _amount);\n    }\n\n    /**\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\n     * See {_burnFrom}.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function burnFrom(address _from, uint256 _amount) external returns (bool) {\n        return _burnFrom(_from, _amount);\n    }\n\n    /**\n     * @dev Burns tokens from an address, deducting from the caller's allowance.\n     *      Decreases total amount minted if called by a bridge.\n     * @param _from The address to burn tokens from.\n     * @param _amount The amount to burn.\n     */\n    function _burnFrom(address _from, uint256 _amount) internal returns (bool) {\n        Supply storage b = bridges[msg.sender];\n        if (b.cap > 0 || b.total > 0) {\n            // set cap to 1 would effectively disable a deprecated bridge's ability to burn\n            require(b.total >= _amount, \"exceeds bridge minted amount\");\n            unchecked {\n                b.total -= _amount;\n            }\n        }\n        _spendAllowance(_from, msg.sender, _amount);\n        _burn(_from, _amount);\n        return true;\n    }\n\n    /**\n     * @notice Returns the decimals of the token.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @notice Updates the supply cap for a bridge.\n     * @param _bridge The bridge address.\n     * @param _cap The new supply cap.\n     */\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external onlyOwner {\n        // cap == 0 means revoking bridge role\n        bridges[_bridge].cap = _cap;\n        emit BridgeSupplyCapUpdated(_bridge, _cap);\n    }\n\n    /**\n     * @notice Returns the owner address. Required by BEP20.\n     */\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      }
    },
    "settings": {
      "metadata": {
        "bytecodeHash": "ipfs",
        "useLiteralContent": true
      },
      "libraries": {},
      "optimizer": {
        "runs": 800,
        "enabled": true
      },
      "evmVersion": "london",
      "remappings": []
    }
  },
  "stdJsonOutput": {
    "sources": {
      "contracts/safeguard/Ownable.sol": {
        "id": 5
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "id": 3
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "id": 0
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "id": 1
      },
      "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": {
        "id": 4
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 2
      }
    },
    "contracts": {
      "contracts/pegged-bridge/tokens/MultiBridgeToken.sol": {
        "MultiBridgeToken": {
          "abi": [
            {
              "type": "constructor",
              "inputs": [
                {
                  "name": "name_",
                  "type": "string",
                  "internalType": "string"
                },
                {
                  "name": "symbol_",
                  "type": "string",
                  "internalType": "string"
                },
                {
                  "name": "decimals_",
                  "type": "uint8",
                  "internalType": "uint8"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "Approval",
              "type": "event",
              "inputs": [
                {
                  "name": "owner",
                  "type": "address",
                  "indexed": true,
                  "internalType": "address"
                },
                {
                  "name": "spender",
                  "type": "address",
                  "indexed": true,
                  "internalType": "address"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "indexed": false,
                  "internalType": "uint256"
                }
              ],
              "anonymous": false
            },
            {
              "name": "BridgeSupplyCapUpdated",
              "type": "event",
              "inputs": [
                {
                  "name": "bridge",
                  "type": "address",
                  "indexed": false,
                  "internalType": "address"
                },
                {
                  "name": "supplyCap",
                  "type": "uint256",
                  "indexed": false,
                  "internalType": "uint256"
                }
              ],
              "anonymous": false
            },
            {
              "name": "OwnershipTransferred",
              "type": "event",
              "inputs": [
                {
                  "name": "previousOwner",
                  "type": "address",
                  "indexed": true,
                  "internalType": "address"
                },
                {
                  "name": "newOwner",
                  "type": "address",
                  "indexed": true,
                  "internalType": "address"
                }
              ],
              "anonymous": false
            },
            {
              "name": "Transfer",
              "type": "event",
              "inputs": [
                {
                  "name": "from",
                  "type": "address",
                  "indexed": true,
                  "internalType": "address"
                },
                {
                  "name": "to",
                  "type": "address",
                  "indexed": true,
                  "internalType": "address"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "indexed": false,
                  "internalType": "uint256"
                }
              ],
              "anonymous": false
            },
            {
              "name": "allowance",
              "type": "function",
              "inputs": [
                {
                  "name": "owner",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "spender",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "approve",
              "type": "function",
              "inputs": [
                {
                  "name": "spender",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "balanceOf",
              "type": "function",
              "inputs": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "bridges",
              "type": "function",
              "inputs": [
                {
                  "name": "",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "outputs": [
                {
                  "name": "cap",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "total",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "burn",
              "type": "function",
              "inputs": [
                {
                  "name": "_amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "burn",
              "type": "function",
              "inputs": [
                {
                  "name": "_from",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "burnFrom",
              "type": "function",
              "inputs": [
                {
                  "name": "_from",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "decimals",
              "type": "function",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "uint8",
                  "internalType": "uint8"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "decreaseAllowance",
              "type": "function",
              "inputs": [
                {
                  "name": "spender",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "subtractedValue",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "getOwner",
              "type": "function",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "increaseAllowance",
              "type": "function",
              "inputs": [
                {
                  "name": "spender",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "addedValue",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "mint",
              "type": "function",
              "inputs": [
                {
                  "name": "_to",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "name",
              "type": "function",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "string",
                  "internalType": "string"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "owner",
              "type": "function",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "symbol",
              "type": "function",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "string",
                  "internalType": "string"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "totalSupply",
              "type": "function",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "stateMutability": "view"
            },
            {
              "name": "transfer",
              "type": "function",
              "inputs": [
                {
                  "name": "to",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "transferFrom",
              "type": "function",
              "inputs": [
                {
                  "name": "from",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "to",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "nonpayable"
            },
            {
              "name": "transferOwnership",
              "type": "function",
              "inputs": [
                {
                  "name": "newOwner",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "outputs": [],
              "stateMutability": "nonpayable"
            },
            {
              "name": "updateBridgeSupplyCap",
              "type": "function",
              "inputs": [
                {
                  "name": "_bridge",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "_cap",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "outputs": [],
              "stateMutability": "nonpayable"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"name\":\"BridgeSupplyCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"updateBridgeSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"The amount to burn.\",\"_from\":\"The address to burn tokens from.\"}},\"burn(uint256)\":{\"params\":{\"_amount\":\"The amount to burn.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"_amount\":\"The amount to burn.\",\"_from\":\"The address to burn tokens from.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"The amount to mint.\",\"_to\":\"The address to mint tokens to.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBridgeSupplyCap(address,uint256)\":{\"params\":{\"_bridge\":\"The bridge address.\",\"_cap\":\"The new supply cap.\"}}},\"title\":\"Example Multi-Bridge Pegged ERC20 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"Burns tokens from an address. Decreases total amount minted if called by a bridge. Alternative to {burnFrom} for compatibility with some bridge implementations. See {_burnFrom}.\"},\"burn(uint256)\":{\"notice\":\"Burns tokens for msg.sender.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns tokens from an address. Decreases total amount minted if called by a bridge. See {_burnFrom}.\"},\"decimals()\":{\"notice\":\"Returns the decimals of the token.\"},\"getOwner()\":{\"notice\":\"Returns the owner address. Required by BEP20.\"},\"mint(address,uint256)\":{\"notice\":\"Mints tokens to an address. Increases total amount minted by the calling bridge.\"},\"updateBridgeSupplyCap(address,uint256)\":{\"notice\":\"Updates the supply cap for a bridge.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pegged-bridge/tokens/MultiBridgeToken.sol\":\"MultiBridgeToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/pegged-bridge/tokens/MultiBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\n/**\\n * @title Example Multi-Bridge Pegged ERC20 token\\n */\\ncontract MultiBridgeToken is ERC20, Ownable {\\n    struct Supply {\\n        uint256 cap;\\n        uint256 total;\\n    }\\n    mapping(address => Supply) public bridges; // bridge address -> supply\\n\\n    uint8 private immutable _decimals;\\n\\n    event BridgeSupplyCapUpdated(address bridge, uint256 supplyCap);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) ERC20(name_, symbol_) {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @notice Mints tokens to an address. Increases total amount minted by the calling bridge.\\n     * @param _to The address to mint tokens to.\\n     * @param _amount The amount to mint.\\n     */\\n    function mint(address _to, uint256 _amount) external returns (bool) {\\n        Supply storage b = bridges[msg.sender];\\n        require(b.cap > 0, \\\"invalid caller\\\");\\n        b.total += _amount;\\n        require(b.total <= b.cap, \\\"exceeds bridge supply cap\\\");\\n        _mint(_to, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burns tokens for msg.sender.\\n     * @param _amount The amount to burn.\\n     */\\n    function burn(uint256 _amount) external returns (bool) {\\n        _burn(msg.sender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\\n     * Alternative to {burnFrom} for compatibility with some bridge implementations.\\n     * See {_burnFrom}.\\n     * @param _from The address to burn tokens from.\\n     * @param _amount The amount to burn.\\n     */\\n    function burn(address _from, uint256 _amount) external returns (bool) {\\n        return _burnFrom(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Burns tokens from an address. Decreases total amount minted if called by a bridge.\\n     * See {_burnFrom}.\\n     * @param _from The address to burn tokens from.\\n     * @param _amount The amount to burn.\\n     */\\n    function burnFrom(address _from, uint256 _amount) external returns (bool) {\\n        return _burnFrom(_from, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens from an address, deducting from the caller's allowance.\\n     *      Decreases total amount minted if called by a bridge.\\n     * @param _from The address to burn tokens from.\\n     * @param _amount The amount to burn.\\n     */\\n    function _burnFrom(address _from, uint256 _amount) internal returns (bool) {\\n        Supply storage b = bridges[msg.sender];\\n        if (b.cap > 0 || b.total > 0) {\\n            // set cap to 1 would effectively disable a deprecated bridge's ability to burn\\n            require(b.total >= _amount, \\\"exceeds bridge minted amount\\\");\\n            unchecked {\\n                b.total -= _amount;\\n            }\\n        }\\n        _spendAllowance(_from, msg.sender, _amount);\\n        _burn(_from, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the decimals of the token.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @notice Updates the supply cap for a bridge.\\n     * @param _bridge The bridge address.\\n     * @param _cap The new supply cap.\\n     */\\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external onlyOwner {\\n        // cap == 0 means revoking bridge role\\n        bridges[_bridge].cap = _cap;\\n        emit BridgeSupplyCapUpdated(_bridge, _cap);\\n    }\\n\\n    /**\\n     * @notice Returns the owner address. Required by BEP20.\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner();\\n    }\\n}\\n\",\"keccak256\":\"0x01c04425aad1d6ecca616cdbc4b7018e1325438e9a3b5a0b4ab87f5378864f58\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "decimals()": {
                "notice": "Returns the decimals of the token."
              },
              "getOwner()": {
                "notice": "Returns the owner address. Required by BEP20."
              },
              "burn(uint256)": {
                "notice": "Burns tokens for msg.sender."
              },
              "burn(address,uint256)": {
                "notice": "Burns tokens from an address. Decreases total amount minted if called by a bridge. Alternative to {burnFrom} for compatibility with some bridge implementations. See {_burnFrom}."
              },
              "mint(address,uint256)": {
                "notice": "Mints tokens to an address. Increases total amount minted by the calling bridge."
              },
              "burnFrom(address,uint256)": {
                "notice": "Burns tokens from an address. Decreases total amount minted if called by a bridge. See {_burnFrom}."
              },
              "updateBridgeSupplyCap(address,uint256)": {
                "notice": "Updates the supply cap for a bridge."
              }
            },
            "version": 1
          },
          "devdoc": {
            "kind": "dev",
            "title": "Example Multi-Bridge Pegged ERC20 token",
            "methods": {
              "name()": {
                "details": "Returns the name of the token."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "symbol()": {
                "details": "Returns the symbol of the token, usually a shorter version of the name."
              },
              "burn(uint256)": {
                "params": {
                  "_amount": "The amount to burn."
                }
              },
              "totalSupply()": {
                "details": "See {IERC20-totalSupply}."
              },
              "balanceOf(address)": {
                "details": "See {IERC20-balanceOf}."
              },
              "burn(address,uint256)": {
                "params": {
                  "_from": "The address to burn tokens from.",
                  "_amount": "The amount to burn."
                }
              },
              "mint(address,uint256)": {
                "params": {
                  "_to": "The address to mint tokens to.",
                  "_amount": "The amount to mint."
                }
              },
              "approve(address,uint256)": {
                "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
              },
              "burnFrom(address,uint256)": {
                "params": {
                  "_from": "The address to burn tokens from.",
                  "_amount": "The amount to burn."
                }
              },
              "transfer(address,uint256)": {
                "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
              },
              "allowance(address,address)": {
                "details": "See {IERC20-allowance}."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "decreaseAllowance(address,uint256)": {
                "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
              },
              "increaseAllowance(address,uint256)": {
                "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
              },
              "updateBridgeSupplyCap(address,uint256)": {
                "params": {
                  "_cap": "The new supply cap.",
                  "_bridge": "The bridge address."
                }
              }
            },
            "version": 1
          },
          "storageLayout": {
            "types": {
              "t_address": {
                "label": "address",
                "encoding": "inplace",
                "numberOfBytes": "20"
              },
              "t_uint256": {
                "label": "uint256",
                "encoding": "inplace",
                "numberOfBytes": "32"
              },
              "t_string_storage": {
                "label": "string",
                "encoding": "bytes",
                "numberOfBytes": "32"
              },
              "t_struct(Supply)726_storage": {
                "label": "struct MultiBridgeToken.Supply",
                "members": [
                  {
                    "slot": "0",
                    "type": "t_uint256",
                    "astId": 723,
                    "label": "cap",
                    "offset": 0,
                    "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
                  },
                  {
                    "slot": "1",
                    "type": "t_uint256",
                    "astId": 725,
                    "label": "total",
                    "offset": 0,
                    "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
                  }
                ],
                "encoding": "inplace",
                "numberOfBytes": "64"
              },
              "t_mapping(t_address,t_uint256)": {
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "value": "t_uint256",
                "encoding": "mapping",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_struct(Supply)726_storage)": {
                "key": "t_address",
                "label": "mapping(address => struct MultiBridgeToken.Supply)",
                "value": "t_struct(Supply)726_storage",
                "encoding": "mapping",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
                "key": "t_address",
                "label": "mapping(address => mapping(address => uint256))",
                "value": "t_mapping(t_address,t_uint256)",
                "encoding": "mapping",
                "numberOfBytes": "32"
              }
            },
            "storage": [
              {
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)",
                "astId": 15,
                "label": "_balances",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              },
              {
                "slot": "1",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "astId": 21,
                "label": "_allowances",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              },
              {
                "slot": "2",
                "type": "t_uint256",
                "astId": 23,
                "label": "_totalSupply",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              },
              {
                "slot": "3",
                "type": "t_string_storage",
                "astId": 25,
                "label": "_name",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              },
              {
                "slot": "4",
                "type": "t_string_storage",
                "astId": 27,
                "label": "_symbol",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              },
              {
                "slot": "5",
                "type": "t_address",
                "astId": 963,
                "label": "_owner",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              },
              {
                "slot": "6",
                "type": "t_mapping(t_address,t_struct(Supply)726_storage)",
                "astId": 731,
                "label": "bridges",
                "offset": 0,
                "contract": "contracts/pegged-bridge/tokens/MultiBridgeToken.sol:MultiBridgeToken"
              }
            ]
          },
          "evm": {
            "bytecode": {
              "object": "",
              "sourceMap": "220:3525:4:-:0;;;526:163;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;635:5;642:7;2044:5:0;:13;635:5:4;2044::0;:13;:::i;:::-;-1:-1:-1;2067:7:0;:17;2077:7;2067;:17;:::i;:::-;;1978:113;;992:21:5;1002:10;992:9;;;:21;;:::i;:::-;661::4::1;;;::::0;-1:-1:-1;220:3525:4;;-1:-1:-1;220:3525:4;2111:169:5;2185:6;;;-1:-1:-1;;;;;2201:17:5;;;-1:-1:-1;;;;;;2201:17:5;;;;;;;2233:40;;2185:6;;;2201:17;2185:6;;2233:40;;2166:16;;2233:40;2156:124;2111:169;:::o;14:127:6:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:6;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:6;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:6:o;991:712::-;1097:6;1105;1113;1166:2;1154:9;1145:7;1141:23;1137:32;1134:52;;;1182:1;1179;1172:12;1134:52;1209:16;;-1:-1:-1;;;;;1274:14:6;;;1271:34;;;1301:1;1298;1291:12;1271:34;1324:61;1377:7;1368:6;1357:9;1353:22;1324:61;:::i;:::-;1314:71;;1431:2;1420:9;1416:18;1410:25;1394:41;;1460:2;1450:8;1447:16;1444:36;;;1476:1;1473;1466:12;1444:36;;1499:63;1554:7;1543:8;1532:9;1528:24;1499:63;:::i;:::-;1489:73;;;1605:2;1594:9;1590:18;1584:25;1649:4;1642:5;1638:16;1631:5;1628:27;1618:55;;1669:1;1666;1659:12;1618:55;1692:5;1682:15;;;991:712;;;;;:::o;1708:380::-;1787:1;1783:12;;;;1830;;;1851:61;;1905:4;1897:6;1893:17;1883:27;;1851:61;1958:2;1950:6;1947:14;1927:18;1924:38;1921:161;;2004:10;1999:3;1995:20;1992:1;1985:31;2039:4;2036:1;2029:15;2067:4;2064:1;2057:15;1921:161;;1708:380;;;:::o;2219:545::-;2321:2;2316:3;2313:11;2310:448;;;2357:1;2382:5;2378:2;2371:17;2427:4;2423:2;2413:19;2497:2;2485:10;2481:19;2478:1;2474:27;2468:4;2464:38;2533:4;2521:10;2518:20;2515:47;;;-1:-1:-1;2556:4:6;2515:47;2611:2;2606:3;2602:12;2599:1;2595:20;2589:4;2585:31;2575:41;;2666:82;2684:2;2677:5;2674:13;2666:82;;;2729:17;;;2710:1;2699:13;2666:82;;;2670:3;;;2310:448;2219:545;;;:::o;2940:1352::-;3060:10;;-1:-1:-1;;;;;3082:30:6;;3079:56;;;3115:18;;:::i;:::-;3144:97;3234:6;3194:38;3226:4;3220:11;3194:38;:::i;:::-;3188:4;3144:97;:::i;:::-;3296:4;;3360:2;3349:14;;3377:1;3372:663;;;;4079:1;4096:6;4093:89;;;-1:-1:-1;4148:19:6;;;4142:26;4093:89;-1:-1:-1;;2897:1:6;2893:11;;;2889:24;2885:29;2875:40;2921:1;2917:11;;;2872:57;4195:81;;3342:944;;3372:663;2166:1;2159:14;;;2203:4;2190:18;;-1:-1:-1;;3408:20:6;;;3526:236;3540:7;3537:1;3534:14;3526:236;;;3629:19;;;3623:26;3608:42;;3721:27;;;;3689:1;3677:14;;;;3556:19;;3526:236;;;3530:3;3790:6;3781:7;3778:19;3775:201;;;3851:19;;;3845:26;-1:-1:-1;;3934:1:6;3930:14;;;3946:3;3926:24;3922:37;3918:42;3903:58;3888:74;;3775:201;-1:-1:-1;;;;;4022:1:6;4006:14;;;4002:22;3989:36;;-1:-1:-1;2940:1352:6:o;:::-;220:3525:4;;;;;;;;;;;;",
              "linkReferences": {}
            },
            "deployedBytecode": {
              "object": "",
              "sourceMap": "220:3525:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:6;;1185:22;1167:41;;1155:2;1140:18;4433:197:0;1027:187:6;3244:106:0;3331:12;;3244:106;;;1365:25:6;;;1353:2;1338:18;3244:106:0;1219:177:6;5192:286:0;;;;;;:::i;:::-;;:::i;3100:98:4:-;;;1906:4:6;3182:9:4;1894:17:6;1876:36;;1864:2;1849:18;3100:98:4;1734:184:6;5873:236:0;;;;;;:::i;:::-;;:::i;898:311:4:-;;;;;;:::i;:::-;;:::i;1317:119::-;;;;;;:::i;:::-;;:::i;3353:224::-;;;;;;:::i;:::-;;:::i;:::-;;3408:125:0;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:0;3482:7;3508:18;;;;;;;;;;;;3408:125;2118:123:4;;;;;;:::i;:::-;;:::i;3660:83::-;;;:::i;:::-;;;-1:-1:-1;;;;;2463:55:6;;;2445:74;;2433:2;2418:18;3660:83:4;2299:226:6;1479:85:5;1551:6;;-1:-1:-1;;;;;1551:6:5;1479:85;;2367:102:0;;;:::i;6596:429::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;340:41:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;2704:25:6;;;2760:2;2745:18;;2738:34;;;;2677:18;340:41:4;2530:248:6;3976:149:0;;;;;;:::i;:::-;-1:-1:-1;;;;;4091:18:0;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149;1916:189:5;;;;;;:::i;:::-;;:::i;2156:98:0:-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:3;4570:32:0;719:10:3;4586:7:0;4595:6;4570:8;:32::i;:::-;4619:4;4612:11;;;4433:197;;;;;:::o;5192:286::-;5319:4;719:10:3;5375:38:0;5391:4;719:10:3;5406:6:0;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:0;;5192:286;-1:-1:-1;;;;5192:286:0:o;5873:236::-;719:10:3;5961:4:0;6040:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6040:27:0;;;;;;;;;;5961:4;;719:10:3;6015:66:0;;719:10:3;;6040:27:0;;:40;;6070:10;;6040:40;:::i;:::-;6015:8;:66::i;898:311:4:-;1003:10;960:4;995:19;;;:7;:19;;;;;1032:5;;1024:36;;;;-1:-1:-1;;;1024:36:4;;3897:2:6;1024:36:4;;;3879:21:6;3936:2;3916:18;;;3909:30;3975:16;3955:18;;;3948:44;4009:18;;1024:36:4;;;;;;;;;1081:7;1070:1;:7;;;:18;;;;;;;:::i;:::-;;;;-1:-1:-1;;1117:5:4;;1106:7;;;;:16;;1098:54;;;;-1:-1:-1;;;1098:54:4;;4240:2:6;1098:54:4;;;4222:21:6;4279:2;4259:18;;;4252:30;4318:27;4298:18;;;4291:55;4363:18;;1098:54:4;4038:349:6;1098:54:4;1162:19;1168:3;1173:7;1162:5;:19::i;1317:119::-;1366:4;1382:26;1388:10;1400:7;1382:5;:26::i;:::-;-1:-1:-1;1425:4:4;;1317:119;-1:-1:-1;1317:119:4:o;3353:224::-;1702:10:5;1691:7;1551:6;;-1:-1:-1;;;;;1551:6:5;;1479:85;1691:7;-1:-1:-1;;;;;1691:21:5;;1683:66;;;;-1:-1:-1;;;1683:66:5;;4594:2:6;1683:66:5;;;4576:21:6;;;4613:18;;;4606:30;4672:34;4652:18;;;4645:62;4724:18;;1683:66:5;4392:356:6;1683:66:5;-1:-1:-1;;;;;3491:16:4;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;;:27;;;3533:37;;4927:74:6;;;5017:18;;5010:34;;;3533:37:4::1;::::0;4900:18:6;3533:37:4::1;;;;;;;3353:224:::0;;:::o;2118:123::-;2186:4;2209:25;2219:5;2226:7;2209:9;:25::i;:::-;2202:32;2118:123;-1:-1:-1;;;2118:123:4:o;3660:83::-;3703:7;3729;1551:6:5;;-1:-1:-1;;;;;1551:6:5;;1479:85;3729:7:4;3722:14;;3660:83;:::o;2367:102:0:-;2423:13;2455:7;2448:14;;;;;:::i;6596:429::-;719:10:3;6689:4:0;6770:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6770:27:0;;;;;;;;;;6689:4;;719:10:3;6815:35:0;;;;6807:85;;;;-1:-1:-1;;;6807:85:0;;5257:2:6;6807:85:0;;;5239:21:6;5296:2;5276:18;;;5269:30;5335:34;5315:18;;;5308:62;5406:7;5386:18;;;5379:35;5431:19;;6807:85:0;5055:401:6;6807:85:0;6926:60;6935:5;6942:7;6970:15;6951:16;:34;6926:8;:60::i;3729:189::-;3808:4;719:10:3;3862:28:0;719:10:3;3879:2:0;3883:6;3862:9;:28::i;1916:189:5:-;1702:10;1691:7;1551:6;;-1:-1:-1;;;;;1551:6:5;;1479:85;1691:7;-1:-1:-1;;;;;1691:21:5;;1683:66;;;;-1:-1:-1;;;1683:66:5;;4594:2:6;1683:66:5;;;4576:21:6;;;4613:18;;;4606:30;4672:34;4652:18;;;4645:62;4724:18;;1683:66:5;4392:356:6;1683:66:5;-1:-1:-1;;;;;2004:22:5;::::1;1996:73;;;::::0;-1:-1:-1;;;1996:73:5;;5663:2:6;1996:73:5::1;::::0;::::1;5645:21:6::0;5702:2;5682:18;;;5675:30;5741:34;5721:18;;;5714:62;5812:8;5792:18;;;5785:36;5838:19;;1996:73:5::1;5461:402:6::0;1996:73:5::1;2079:19;2089:8;2079:9;:19::i;:::-;1916:189:::0;:::o;10123:370:0:-;-1:-1:-1;;;;;10254:19:0;;10246:68;;;;-1:-1:-1;;;10246:68:0;;6070:2:6;10246:68:0;;;6052:21:6;6109:2;6089:18;;;6082:30;6148:34;6128:18;;;6121:62;-1:-1:-1;;;6199:18:6;;;6192:34;6243:19;;10246:68:0;5868:400:6;10246:68:0;-1:-1:-1;;;;;10332:21:0;;10324:68;;;;-1:-1:-1;;;10324:68:0;;6475:2:6;10324:68:0;;;6457:21:6;6514:2;6494:18;;;6487:30;6553:34;6533:18;;;6526:62;-1:-1:-1;;;6604:18:6;;;6597:32;6646:19;;10324:68:0;6273:398:6;10324:68:0;-1:-1:-1;;;;;10403:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10454:32;;1365:25:6;;;10454:32:0;;1338:18:6;10454:32:0;;;;;;;;10123:370;;;:::o;10770:441::-;-1:-1:-1;;;;;4091:18:0;;;10900:24;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10966:37:0;;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:0;;6878:2:6;11019:68:0;;;6860:21:6;6917:2;6897:18;;;6890:30;6956:31;6936:18;;;6929:59;7005:18;;11019:68:0;6676:353:6;11019:68:0;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;:::-;10890:321;10770:441;;;:::o;7488:651::-;-1:-1:-1;;;;;7614:18:0;;7606:68;;;;-1:-1:-1;;;7606:68:0;;7236:2:6;7606:68:0;;;7218:21:6;7275:2;7255:18;;;7248:30;7314:34;7294:18;;;7287:62;7385:7;7365:18;;;7358:35;7410:19;;7606:68:0;7034:401:6;7606:68:0;-1:-1:-1;;;;;7692:16:0;;7684:64;;;;-1:-1:-1;;;7684:64:0;;7642:2:6;7684:64:0;;;7624:21:6;7681:2;7661:18;;;7654:30;7720:34;7700:18;;;7693:62;-1:-1:-1;;;7771:18:6;;;7764:33;7814:19;;7684:64:0;7440:399:6;7684:64:0;-1:-1:-1;;;;;7830:15:0;;7808:19;7830:15;;;;;;;;;;;7863:21;;;;7855:72;;;;-1:-1:-1;;;7855:72:0;;8046:2:6;7855:72:0;;;8028:21:6;8085:2;8065:18;;;8058:30;8124:34;8104:18;;;8097:62;8195:8;8175:18;;;8168:36;8221:19;;7855:72:0;7844:402:6;7855:72:0;-1:-1:-1;;;;;7961:15:0;;;:9;:15;;;;;;;;;;;7979:20;;;7961:38;;8019:13;;;;;;;;:23;;7993:6;;7961:9;8019:23;;7993:6;;8019:23;:::i;:::-;;;;;;;;8073:2;-1:-1:-1;;;;;8058:26:0;8067:4;-1:-1:-1;;;;;8058:26:0;;8077:6;8058:26;;;;1365:25:6;;1353:2;1338:18;;1219:177;8058:26:0;;;;;;;;8095:37;9124:576;8415:389;-1:-1:-1;;;;;8498:21:0;;8490:65;;;;-1:-1:-1;;;8490:65:0;;8453:2:6;8490:65:0;;;8435:21:6;8492:2;8472:18;;;8465:30;8531:33;8511:18;;;8504:61;8582:18;;8490:65:0;8251:355:6;8490:65:0;8642:6;8626:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8658:18:0;;:9;:18;;;;;;;;;;:28;;8680:6;;8658:9;:28;;8680:6;;8658:28;:::i;:::-;;;;-1:-1:-1;;8701:37:0;;1365:25:6;;;-1:-1:-1;;;;;8701:37:0;;;8718:1;;8701:37;;1353:2:6;1338:18;8701:37:0;;;;;;;8415:389;;:::o;9124:576::-;-1:-1:-1;;;;;9207:21:0;;9199:67;;;;-1:-1:-1;;;9199:67:0;;8813:2:6;9199:67:0;;;8795:21:6;8852:2;8832:18;;;8825:30;8891:34;8871:18;;;8864:62;-1:-1:-1;;;8942:18:6;;;8935:31;8983:19;;9199:67:0;8611:397:6;9199:67:0;-1:-1:-1;;;;;9362:18:0;;9337:22;9362:18;;;;;;;;;;;9398:24;;;;9390:71;;;;-1:-1:-1;;;9390:71:0;;9215:2:6;9390:71:0;;;9197:21:6;9254:2;9234:18;;;9227:30;9293:34;9273:18;;;9266:62;-1:-1:-1;;;9344:18:6;;;9337:32;9386:19;;9390:71:0;9013:398:6;9390:71:0;-1:-1:-1;;;;;9495:18:0;;:9;:18;;;;;;;;;;9516:23;;;9495:44;;9559:12;:22;;9533:6;;9495:9;9559:22;;9533:6;;9559:22;:::i;:::-;;;;-1:-1:-1;;9597:37:0;;1365:25:6;;;9623:1:0;;-1:-1:-1;;;;;9597:37:0;;;;;1353:2:6;1338:18;9597:37:0;1219:177:6;2504:524:4;2616:10;2573:4;2608:19;;;:7;:19;;;;;2641:5;;:9;;;:24;;;2664:1;2654;:7;;;:11;2641:24;2637:280;;;2792:7;2781:1;:7;;;:18;;2773:59;;;;-1:-1:-1;;;2773:59:4;;9751:2:6;2773:59:4;;;9733:21:6;9790:2;9770:18;;;9763:30;9829;9809:18;;;9802:58;9877:18;;2773:59:4;9549:352:6;2773:59:4;2874:7;;;:18;;;;;;;2637:280;2926:43;2942:5;2949:10;2961:7;2926:15;:43::i;:::-;2979:21;2985:5;2992:7;2979:5;:21::i;2111:169:5:-;2185:6;;;-1:-1:-1;;;;;2201:17:5;;;;;;;;;;;2233:40;;2185:6;;;2201:17;2185:6;;2233:40;;2166:16;;2233:40;2156:124;2111:169;:::o;14:548:6:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:6;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:6:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:180::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;-1:-1:-1;2074:23:6;;1923:180;-1:-1:-1;1923:180:6:o;2108:186::-;2167:6;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;2783:260::-;2851:6;2859;2912:2;2900:9;2891:7;2887:23;2883:32;2880:52;;;2928:1;2925;2918:12;2880:52;2951:29;2970:9;2951:29;:::i;:::-;2941:39;;2999:38;3033:2;3022:9;3018:18;2999:38;:::i;:::-;2989:48;;2783:260;;;;;:::o;3048:380::-;3127:1;3123:12;;;;3170;;;3191:61;;3245:4;3237:6;3233:17;3223:27;;3191:61;3298:2;3290:6;3287:14;3267:18;3264:38;3261:161;;3344:10;3339:3;3335:20;3332:1;3325:31;3379:4;3376:1;3369:15;3407:4;3404:1;3397:15;3261:161;;3048:380;;;:::o;3433:127::-;3494:10;3489:3;3485:20;3482:1;3475:31;3525:4;3522:1;3515:15;3549:4;3546:1;3539:15;3565:125;3630:9;;;3651:10;;;3648:36;;;3664:18;;:::i;9416:128::-;9483:9;;;9504:11;;;9501:37;;;9518:18;;:::i",
              "linkReferences": {},
              "immutableReferences": {
                "733": [
                  {
                    "start": 478,
                    "length": 32
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "proxyResolution": {
    "isProxy": false,
    "proxyType": null,
    "implementations": []
  },
  "match": "exact_match",
  "chainId": "23294",
  "address": "0x39d22B78A7651A76Ffbde2aaAB5FD92666Aca520"
}
